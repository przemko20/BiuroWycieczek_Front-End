{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _createClass from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\n\n/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { PropertyAccessors } from './property-accessors.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nvar HOST_DIR = /:host\\(:dir\\((ltr|rtl)\\)\\)/g;\nvar HOST_DIR_REPLACMENT = ':host([dir=\"$1\"])';\nvar EL_DIR = /([\\s\\w-#\\.\\[\\]\\*]*):dir\\((ltr|rtl)\\)/g;\nvar EL_DIR_REPLACMENT = ':host([dir=\"$2\"]) $1';\n/**\n * @type {!Array<!Polymer_DirMixin>}\n */\n\nvar DIR_INSTANCES = [];\n/** @type {MutationObserver} */\n\nvar observer = null;\nvar DOCUMENT_DIR = '';\n\nfunction getRTL() {\n  DOCUMENT_DIR = document.documentElement.getAttribute('dir');\n}\n/**\n * @param {!Polymer_DirMixin} instance Instance to set RTL status on\n */\n\n\nfunction setRTL(instance) {\n  if (!instance.__autoDirOptOut) {\n    var el =\n    /** @type {!HTMLElement} */\n    instance;\n    el.setAttribute('dir', DOCUMENT_DIR);\n  }\n}\n\nfunction updateDirection() {\n  getRTL();\n  DOCUMENT_DIR = document.documentElement.getAttribute('dir');\n\n  for (var i = 0; i < DIR_INSTANCES.length; i++) {\n    setRTL(DIR_INSTANCES[i]);\n  }\n}\n\nfunction takeRecords() {\n  if (observer && observer.takeRecords().length) {\n    updateDirection();\n  }\n}\n/**\n * Element class mixin that allows elements to use the `:dir` CSS Selector to\n * have text direction specific styling.\n *\n * With this mixin, any stylesheet provided in the template will transform\n * `:dir` into `:host([dir])` and sync direction with the page via the\n * element's `dir` attribute.\n *\n * Elements can opt out of the global page text direction by setting the `dir`\n * attribute directly in `ready()` or in HTML.\n *\n * Caveats:\n * - Applications must set `<html dir=\"ltr\">` or `<html dir=\"rtl\">` to sync\n *   direction\n * - Automatic left-to-right or right-to-left styling is sync'd with the\n *   `<html>` element only.\n * - Changing `dir` at runtime is supported.\n * - Opting out of the global direction styling is permanent\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertyAccessors\n */\n\n\nexport var DirMixin = dedupingMixin(function (base) {\n  if (!observer) {\n    getRTL();\n    observer = new MutationObserver(updateDirection);\n    observer.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: ['dir']\n    });\n  }\n  /**\n   * @constructor\n   * @extends {base}\n   * @implements {Polymer_PropertyAccessors}\n   * @private\n   */\n\n\n  var elementBase = PropertyAccessors(base);\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_DirMixin}\n   */\n\n  var Dir =\n  /*#__PURE__*/\n  function (_elementBase) {\n    _inherits(Dir, _elementBase);\n\n    _createClass(Dir, null, [{\n      key: \"_processStyleText\",\n\n      /**\n       * @override\n       * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n       */\n      value: function _processStyleText(cssText, baseURI) {\n        cssText = _get(_getPrototypeOf(Dir), \"_processStyleText\", this).call(this, cssText, baseURI);\n        cssText = this._replaceDirInCssText(cssText);\n        return cssText;\n      }\n      /**\n       * Replace `:dir` in the given CSS text\n       *\n       * @param {string} text CSS text to replace DIR\n       * @return {string} Modified CSS\n       */\n\n    }, {\n      key: \"_replaceDirInCssText\",\n      value: function _replaceDirInCssText(text) {\n        var replacedText = text;\n        replacedText = replacedText.replace(HOST_DIR, HOST_DIR_REPLACMENT);\n        replacedText = replacedText.replace(EL_DIR, EL_DIR_REPLACMENT);\n\n        if (text !== replacedText) {\n          this.__activateDir = true;\n        }\n\n        return replacedText;\n      }\n    }]);\n\n    function Dir() {\n      var _this;\n\n      _classCallCheck(this, Dir);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Dir).call(this));\n      /** @type {boolean} */\n\n      _this.__autoDirOptOut = false;\n      return _this;\n    }\n    /**\n     * @suppress {invalidCasts} Closure doesn't understand that `this` is an HTMLElement\n     * @return {void}\n     */\n\n\n    _createClass(Dir, [{\n      key: \"ready\",\n      value: function ready() {\n        _get(_getPrototypeOf(Dir.prototype), \"ready\", this).call(this);\n\n        this.__autoDirOptOut =\n        /** @type {!HTMLElement} */\n        this.hasAttribute('dir');\n      }\n      /**\n       * @suppress {missingProperties} If it exists on elementBase, it can be super'd\n       * @return {void}\n       */\n\n    }, {\n      key: \"connectedCallback\",\n      value: function connectedCallback() {\n        if (elementBase.prototype.connectedCallback) {\n          _get(_getPrototypeOf(Dir.prototype), \"connectedCallback\", this).call(this);\n        }\n\n        if (this.constructor.__activateDir) {\n          takeRecords();\n          DIR_INSTANCES.push(this);\n          setRTL(this);\n        }\n      }\n      /**\n       * @suppress {missingProperties} If it exists on elementBase, it can be super'd\n       * @return {void}\n       */\n\n    }, {\n      key: \"disconnectedCallback\",\n      value: function disconnectedCallback() {\n        if (elementBase.prototype.disconnectedCallback) {\n          _get(_getPrototypeOf(Dir.prototype), \"disconnectedCallback\", this).call(this);\n        }\n\n        if (this.constructor.__activateDir) {\n          var idx = DIR_INSTANCES.indexOf(this);\n\n          if (idx > -1) {\n            DIR_INSTANCES.splice(idx, 1);\n          }\n        }\n      }\n    }]);\n\n    return Dir;\n  }(elementBase);\n\n  Dir.__activateDir = false;\n  return Dir;\n});","map":null,"metadata":{},"sourceType":"module"}