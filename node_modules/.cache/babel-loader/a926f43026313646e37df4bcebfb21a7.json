{"ast":null,"code":"/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';\n/**\n`iron-media-query` can be used to data bind to a CSS media query.\nThe `query` property is a bare CSS media query.\nThe `query-matches` property is a boolean representing whether the page matches\nthat media query.\n\nExample:\n\n```html\n<iron-media-query query=\"(min-width: 600px)\" query-matches=\"{{queryMatches}}\">\n</iron-media-query>\n```\n\n@group Iron Elements\n@demo demo/index.html\n@hero hero.svg\n@element iron-media-query\n*/\n\nPolymer({\n  is: 'iron-media-query',\n  properties: {\n    /**\n     * The Boolean return value of the media query.\n     */\n    queryMatches: {\n      type: Boolean,\n      value: false,\n      readOnly: true,\n      notify: true\n    },\n\n    /**\n     * The CSS media query to evaluate.\n     */\n    query: {\n      type: String,\n      observer: 'queryChanged'\n    },\n\n    /**\n     * If true, the query attribute is assumed to be a complete media query\n     * string rather than a single media feature.\n     */\n    full: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * @type {function(MediaQueryList)}\n     */\n    _boundMQHandler: {\n      value: function value() {\n        return this.queryHandler.bind(this);\n      }\n    },\n\n    /**\n     * @type {MediaQueryList}\n     */\n    _mq: {\n      value: null\n    }\n  },\n  attached: function attached() {\n    this.style.display = 'none';\n    this.queryChanged();\n  },\n  detached: function detached() {\n    this._remove();\n  },\n  _add: function _add() {\n    if (this._mq) {\n      this._mq.addListener(this._boundMQHandler);\n    }\n  },\n  _remove: function _remove() {\n    if (this._mq) {\n      this._mq.removeListener(this._boundMQHandler);\n    }\n\n    this._mq = null;\n  },\n  queryChanged: function queryChanged() {\n    this._remove();\n\n    var query = this.query;\n\n    if (!query) {\n      return;\n    }\n\n    if (!this.full && query[0] !== '(') {\n      query = '(' + query + ')';\n    }\n\n    this._mq = window.matchMedia(query);\n\n    this._add();\n\n    this.queryHandler(this._mq);\n  },\n  queryHandler: function queryHandler(mq) {\n    this._setQueryMatches(mq.matches);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}