{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\nimport { PropertyEffects } from '../mixins/property-effects.js';\nimport { OptionalMutableData } from '../mixins/mutable-data.js';\nimport { GestureEventListeners } from '../mixins/gesture-event-listeners.js';\nimport { strictTemplatePolicy } from '../utils/settings.js';\n/**\n * @constructor\n * @extends {HTMLElement}\n * @implements {Polymer_PropertyEffects}\n * @implements {Polymer_OptionalMutableData}\n * @implements {Polymer_GestureEventListeners}\n * @private\n */\n\nvar domBindBase = GestureEventListeners(OptionalMutableData(PropertyEffects(HTMLElement)));\n/**\n * Custom element to allow using Polymer's template features (data binding,\n * declarative event listeners, etc.) in the main document without defining\n * a new custom element.\n *\n * `<template>` tags utilizing bindings may be wrapped with the `<dom-bind>`\n * element, which will immediately stamp the wrapped template into the main\n * document and bind elements to the `dom-bind` element itself as the\n * binding scope.\n *\n * @polymer\n * @customElement\n * @appliesMixin PropertyEffects\n * @appliesMixin OptionalMutableData\n * @appliesMixin GestureEventListeners\n * @extends {domBindBase}\n * @summary Custom element to allow using Polymer's template features (data\n *   binding, declarative event listeners, etc.) in the main document.\n */\n\nexport var DomBind =\n/*#__PURE__*/\nfunction (_domBindBase) {\n  _inherits(DomBind, _domBindBase);\n\n  _createClass(DomBind, null, [{\n    key: \"observedAttributes\",\n    get: function get() {\n      return ['mutable-data'];\n    }\n  }]);\n\n  function DomBind() {\n    var _this;\n\n    _classCallCheck(this, DomBind);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DomBind).call(this));\n\n    if (strictTemplatePolicy) {\n      throw new Error(\"strictTemplatePolicy: dom-bind not allowed\");\n    }\n\n    _this.root = null;\n    _this.$ = null;\n    _this.__children = null;\n    return _this;\n  }\n  /**\n   * @override\n   * @return {void}\n   */\n\n\n  _createClass(DomBind, [{\n    key: \"attributeChangedCallback\",\n    value: function attributeChangedCallback() {\n      // assumes only one observed attribute\n      this.mutableData = true;\n    }\n    /**\n     * @override\n     * @return {void}\n     */\n\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      this.style.display = 'none';\n      this.render();\n    }\n    /**\n     * @override\n     * @return {void}\n     */\n\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      this.__removeChildren();\n    }\n  }, {\n    key: \"__insertChildren\",\n    value: function __insertChildren() {\n      this.parentNode.insertBefore(this.root, this);\n    }\n  }, {\n    key: \"__removeChildren\",\n    value: function __removeChildren() {\n      if (this.__children) {\n        for (var i = 0; i < this.__children.length; i++) {\n          this.root.appendChild(this.__children[i]);\n        }\n      }\n    }\n    /**\n     * Forces the element to render its content. This is typically only\n     * necessary to call if HTMLImports with the async attribute are used.\n     * @return {void}\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var template;\n\n      if (!this.__children) {\n        template =\n        /** @type {HTMLTemplateElement} */\n        template || this.querySelector('template');\n\n        if (!template) {\n          // Wait until childList changes and template should be there by then\n          var observer = new MutationObserver(function () {\n            template =\n            /** @type {HTMLTemplateElement} */\n            _this2.querySelector('template');\n\n            if (template) {\n              observer.disconnect();\n\n              _this2.render();\n            } else {\n              throw new Error('dom-bind requires a <template> child');\n            }\n          });\n          observer.observe(this, {\n            childList: true\n          });\n          return;\n        }\n\n        this.root = this._stampTemplate(\n        /** @type {!HTMLTemplateElement} */\n        template);\n        this.$ = this.root.$;\n        this.__children = [];\n\n        for (var n = this.root.firstChild; n; n = n.nextSibling) {\n          this.__children[this.__children.length] = n;\n        }\n\n        this._enableProperties();\n      }\n\n      this.__insertChildren();\n\n      this.dispatchEvent(new CustomEvent('dom-change', {\n        bubbles: true,\n        composed: true\n      }));\n    }\n  }]);\n\n  return DomBind;\n}(domBindBase);\ncustomElements.define('dom-bind', DomBind);","map":null,"metadata":{},"sourceType":"module"}