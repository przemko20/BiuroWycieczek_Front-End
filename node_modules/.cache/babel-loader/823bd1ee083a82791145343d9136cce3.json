{"ast":null,"code":"var DEV_MODE_CODE_REGEXP = /\\/\\*\\*\\s+vaadin-dev-mode:start([\\s\\S]*)vaadin-dev-mode:end\\s+\\*\\*\\//i;\n\nfunction isMinified() {\n  function test() {\n    /** vaadin-dev-mode:start\n    return false;\n    vaadin-dev-mode:end **/\n    return true;\n  }\n\n  return uncommentAndRun(test);\n}\n\nfunction isDevelopmentMode() {\n  try {\n    return isForcedDevelopmentMode() || isLocalhost() && !isMinified() && !isFlowProductionMode();\n  } catch (e) {\n    // Some error in this code, assume production so no further actions will be taken\n    return false;\n  }\n}\n\nfunction isForcedDevelopmentMode() {\n  return localStorage.getItem(\"vaadin.developmentmode.force\");\n}\n\nfunction isLocalhost() {\n  return [\"localhost\", \"127.0.0.1\"].indexOf(window.location.hostname) >= 0;\n}\n\nfunction isFlowProductionMode() {\n  if (window.Vaadin && window.Vaadin.Flow && window.Vaadin.Flow.clients) {\n    var productionModeApps = Object.keys(window.Vaadin.Flow.clients).map(function (key) {\n      return window.Vaadin.Flow.clients[key];\n    }).filter(function (client) {\n      return client.productionMode;\n    });\n\n    if (productionModeApps.length > 0) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction uncommentAndRun(callback, args) {\n  if (typeof callback !== 'function') {\n    return;\n  }\n\n  var match = DEV_MODE_CODE_REGEXP.exec(callback.toString());\n\n  if (match) {\n    try {\n      // requires CSP: script-src 'unsafe-eval'\n      callback = new Function(match[1]);\n    } catch (e) {\n      // eat the exception\n      console.log('vaadin-development-mode-detector: uncommentAndRun() failed', e);\n    }\n  }\n\n  return callback(args);\n} // A guard against polymer-modulizer removing the window.Vaadin\n// initialization above.\n\n\nwindow['Vaadin'] = window['Vaadin'] || {};\n/**\n * Inspects the source code of the given `callback` function for\n * specially-marked _commented_ code. If such commented code is found in the\n * callback source, uncomments and runs that code instead of the callback\n * itself. Otherwise runs the callback as is.\n *\n * The optional arguments are passed into the callback / uncommented code,\n * the result is returned.\n *\n * See the `isMinified()` function source code in this file for an example.\n *\n */\n\nexport var runIfDevelopmentMode = function runIfDevelopmentMode(callback, args) {\n  if (window.Vaadin.developmentMode) {\n    return uncommentAndRun(callback, args);\n  }\n};\n\nif (window.Vaadin.developmentMode === undefined) {\n  window.Vaadin.developmentMode = isDevelopmentMode();\n}","map":null,"metadata":{},"sourceType":"module"}