{"ast":null,"code":"/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n'use strict';\n\nimport _classCallCheck from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport ApplyShim from '../src/apply-shim.js';\nimport templateMap from '../src/template-map.js';\nimport { getIsExtends, toCssText, elementHasBuiltCss } from '../src/style-util.js';\nimport * as ApplyShimUtils from '../src/apply-shim-utils.js';\nimport { getComputedStyleValue as _getComputedStyleValue, updateNativeProperties } from '../src/common-utils.js';\nimport { CustomStyleInterfaceInterface } from '../src/custom-style-interface.js'; // eslint-disable-line no-unused-vars\n\nimport { nativeCssVariables, nativeShadow, cssBuild } from '../src/style-settings.js';\n/** @const {ApplyShim} */\n\nvar applyShim = new ApplyShim();\n\nvar ApplyShimInterface =\n/*#__PURE__*/\nfunction () {\n  function ApplyShimInterface() {\n    _classCallCheck(this, ApplyShimInterface);\n\n    /** @type {?CustomStyleInterfaceInterface} */\n    this.customStyleInterface = null;\n    applyShim['invalidCallback'] = ApplyShimUtils.invalidate;\n  }\n\n  _createClass(ApplyShimInterface, [{\n    key: \"ensure\",\n    value: function ensure() {\n      var _this = this;\n\n      if (this.customStyleInterface) {\n        return;\n      }\n\n      if (window.ShadyCSS.CustomStyleInterface) {\n        this.customStyleInterface =\n        /** @type {!CustomStyleInterfaceInterface} */\n        window.ShadyCSS.CustomStyleInterface;\n\n        this.customStyleInterface['transformCallback'] = function (style) {\n          applyShim.transformCustomStyle(style);\n        };\n\n        this.customStyleInterface['validateCallback'] = function () {\n          requestAnimationFrame(function () {\n            if (_this.customStyleInterface['enqueued']) {\n              _this.flushCustomStyles();\n            }\n          });\n        };\n      }\n    }\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     */\n\n  }, {\n    key: \"prepareTemplate\",\n    value: function prepareTemplate(template, elementName) {\n      this.ensure();\n\n      if (elementHasBuiltCss(template)) {\n        return;\n      }\n\n      templateMap[elementName] = template;\n      var ast = applyShim.transformTemplate(template, elementName); // save original style ast to use for revalidating instances\n\n      template['_styleAst'] = ast;\n    }\n  }, {\n    key: \"flushCustomStyles\",\n    value: function flushCustomStyles() {\n      this.ensure();\n\n      if (!this.customStyleInterface) {\n        return;\n      }\n\n      var styles = this.customStyleInterface['processStyles']();\n\n      if (!this.customStyleInterface['enqueued']) {\n        return;\n      }\n\n      for (var i = 0; i < styles.length; i++) {\n        var cs = styles[i];\n        var style = this.customStyleInterface['getStyleForCustomStyle'](cs);\n\n        if (style) {\n          applyShim.transformCustomStyle(style);\n        }\n      }\n\n      this.customStyleInterface['enqueued'] = false;\n    }\n    /**\n     * @param {HTMLElement} element\n     * @param {Object=} properties\n     */\n\n  }, {\n    key: \"styleSubtree\",\n    value: function styleSubtree(element, properties) {\n      this.ensure();\n\n      if (properties) {\n        updateNativeProperties(element, properties);\n      }\n\n      if (element.shadowRoot) {\n        this.styleElement(element);\n        var shadowChildren =\n        /** @type {!ParentNode} */\n        element.shadowRoot.children || element.shadowRoot.childNodes;\n\n        for (var i = 0; i < shadowChildren.length; i++) {\n          this.styleSubtree(\n          /** @type {HTMLElement} */\n          shadowChildren[i]);\n        }\n      } else {\n        var children = element.children || element.childNodes;\n\n        for (var _i = 0; _i < children.length; _i++) {\n          this.styleSubtree(\n          /** @type {HTMLElement} */\n          children[_i]);\n        }\n      }\n    }\n    /**\n     * @param {HTMLElement} element\n     */\n\n  }, {\n    key: \"styleElement\",\n    value: function styleElement(element) {\n      this.ensure();\n\n      var _getIsExtends = getIsExtends(element),\n          is = _getIsExtends.is;\n\n      var template = templateMap[is];\n\n      if (template && elementHasBuiltCss(template)) {\n        return;\n      }\n\n      if (template && !ApplyShimUtils.templateIsValid(template)) {\n        // only revalidate template once\n        if (!ApplyShimUtils.templateIsValidating(template)) {\n          this.prepareTemplate(template, is);\n          ApplyShimUtils.startValidatingTemplate(template);\n        } // update this element instance\n\n\n        var root = element.shadowRoot;\n\n        if (root) {\n          var style =\n          /** @type {HTMLStyleElement} */\n          root.querySelector('style');\n\n          if (style) {\n            // reuse the template's style ast, it has all the original css text\n            style['__cssRules'] = template['_styleAst'];\n            style.textContent = toCssText(template['_styleAst']);\n          }\n        }\n      }\n    }\n    /**\n     * @param {Object=} properties\n     */\n\n  }, {\n    key: \"styleDocument\",\n    value: function styleDocument(properties) {\n      this.ensure();\n      this.styleSubtree(document.body, properties);\n    }\n  }]);\n\n  return ApplyShimInterface;\n}();\n\nif (!window.ShadyCSS || !window.ShadyCSS.ScopingShim) {\n  var applyShimInterface = new ApplyShimInterface();\n  var CustomStyleInterface = window.ShadyCSS && window.ShadyCSS.CustomStyleInterface;\n  /** @suppress {duplicate} */\n\n  window.ShadyCSS = {\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     * @param {string=} elementExtends\n     */\n    prepareTemplate: function prepareTemplate(template, elementName, elementExtends) {\n      // eslint-disable-line no-unused-vars\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.prepareTemplate(template, elementName);\n    },\n\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     * @param {string=} elementExtends\n     */\n    prepareTemplateStyles: function prepareTemplateStyles(template, elementName, elementExtends) {\n      window.ShadyCSS.prepareTemplate(template, elementName, elementExtends);\n    },\n\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     */\n    prepareTemplateDom: function prepareTemplateDom(template, elementName) {},\n    // eslint-disable-line no-unused-vars\n\n    /**\n     * @param {!HTMLElement} element\n     * @param {Object=} properties\n     */\n    styleSubtree: function styleSubtree(element, properties) {\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.styleSubtree(element, properties);\n    },\n\n    /**\n     * @param {!HTMLElement} element\n     */\n    styleElement: function styleElement(element) {\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.styleElement(element);\n    },\n\n    /**\n     * @param {Object=} properties\n     */\n    styleDocument: function styleDocument(properties) {\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.styleDocument(properties);\n    },\n\n    /**\n     * @param {Element} element\n     * @param {string} property\n     * @return {string}\n     */\n    getComputedStyleValue: function getComputedStyleValue(element, property) {\n      return _getComputedStyleValue(element, property);\n    },\n    flushCustomStyles: function flushCustomStyles() {\n      applyShimInterface.flushCustomStyles();\n    },\n    nativeCss: nativeCssVariables,\n    nativeShadow: nativeShadow,\n    cssBuild: cssBuild\n  };\n\n  if (CustomStyleInterface) {\n    window.ShadyCSS.CustomStyleInterface = CustomStyleInterface;\n  }\n}\n\nwindow.ShadyCSS.ApplyShim = applyShim;","map":null,"metadata":{},"sourceType":"module"}