{"ast":null,"code":"/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n'use strict';\n\nimport _classCallCheck from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport documentWait from './document-wait.js';\n/**\n * @typedef {HTMLStyleElement | {getStyle: function():HTMLStyleElement}}\n */\n\nexport var CustomStyleProvider;\nvar SEEN_MARKER = '__seenByShadyCSS';\nvar CACHED_STYLE = '__shadyCSSCachedStyle';\n/** @type {?function(!HTMLStyleElement)} */\n\nvar transformFn = null;\n/** @type {?function()} */\n\nvar validateFn = null;\n/**\nThis interface is provided to add document-level <style> elements to ShadyCSS for processing.\nThese styles must be processed by ShadyCSS to simulate ShadowRoot upper-bound encapsulation from outside styles\nIn addition, these styles may also need to be processed for @apply rules and CSS Custom Properties\n\nTo add document-level styles to ShadyCSS, one can call `ShadyCSS.addDocumentStyle(styleElement)` or `ShadyCSS.addDocumentStyle({getStyle: () => styleElement})`\n\nIn addition, if the process used to discover document-level styles can be synchronously flushed, one should set `ShadyCSS.documentStyleFlush`.\nThis function will be called when calculating styles.\n\nAn example usage of the document-level styling api can be found in `examples/document-style-lib.js`\n\n@unrestricted\n*/\n\nvar CustomStyleInterface =\n/*#__PURE__*/\nfunction () {\n  function CustomStyleInterface() {\n    _classCallCheck(this, CustomStyleInterface);\n\n    /** @type {!Array<!CustomStyleProvider>} */\n    this['customStyles'] = [];\n    this['enqueued'] = false; // NOTE(dfreedm): use quotes here to prevent closure inlining to `function(){}`;\n\n    documentWait(function () {\n      if (window['ShadyCSS']['flushCustomStyles']) {\n        window['ShadyCSS']['flushCustomStyles']();\n      }\n    });\n  }\n  /**\n   * Queue a validation for new custom styles to batch style recalculations\n   */\n\n\n  _createClass(CustomStyleInterface, [{\n    key: \"enqueueDocumentValidation\",\n    value: function enqueueDocumentValidation() {\n      if (this['enqueued'] || !validateFn) {\n        return;\n      }\n\n      this['enqueued'] = true;\n      documentWait(validateFn);\n    }\n    /**\n     * @param {!HTMLStyleElement} style\n     */\n\n  }, {\n    key: \"addCustomStyle\",\n    value: function addCustomStyle(style) {\n      if (!style[SEEN_MARKER]) {\n        style[SEEN_MARKER] = true;\n        this['customStyles'].push(style);\n        this.enqueueDocumentValidation();\n      }\n    }\n    /**\n     * @param {!CustomStyleProvider} customStyle\n     * @return {HTMLStyleElement}\n     */\n\n  }, {\n    key: \"getStyleForCustomStyle\",\n    value: function getStyleForCustomStyle(customStyle) {\n      if (customStyle[CACHED_STYLE]) {\n        return customStyle[CACHED_STYLE];\n      }\n\n      var style;\n\n      if (customStyle['getStyle']) {\n        style = customStyle['getStyle']();\n      } else {\n        style = customStyle;\n      }\n\n      return style;\n    }\n    /**\n     * @return {!Array<!CustomStyleProvider>}\n     */\n\n  }, {\n    key: \"processStyles\",\n    value: function processStyles() {\n      var cs = this['customStyles'];\n\n      for (var i = 0; i < cs.length; i++) {\n        var customStyle = cs[i];\n\n        if (customStyle[CACHED_STYLE]) {\n          continue;\n        }\n\n        var style = this.getStyleForCustomStyle(customStyle);\n\n        if (style) {\n          // HTMLImports polyfill may have cloned the style into the main document,\n          // which is referenced with __appliedElement.\n          var styleToTransform =\n          /** @type {!HTMLStyleElement} */\n          style['__appliedElement'] || style;\n\n          if (transformFn) {\n            transformFn(styleToTransform);\n          }\n\n          customStyle[CACHED_STYLE] = styleToTransform;\n        }\n      }\n\n      return cs;\n    }\n  }]);\n\n  return CustomStyleInterface;\n}();\n/* eslint-disable no-self-assign */\n\n\nexport { CustomStyleInterface as default };\nCustomStyleInterface.prototype['addCustomStyle'] = CustomStyleInterface.prototype.addCustomStyle;\nCustomStyleInterface.prototype['getStyleForCustomStyle'] = CustomStyleInterface.prototype.getStyleForCustomStyle;\nCustomStyleInterface.prototype['processStyles'] = CustomStyleInterface.prototype.processStyles;\n/* eslint-enable no-self-assign */\n\nObject.defineProperties(CustomStyleInterface.prototype, {\n  'transformCallback': {\n    /** @return {?function(!HTMLStyleElement)} */\n    get: function get() {\n      return transformFn;\n    },\n\n    /** @param {?function(!HTMLStyleElement)} fn */\n    set: function set(fn) {\n      transformFn = fn;\n    }\n  },\n  'validateCallback': {\n    /** @return {?function()} */\n    get: function get() {\n      return validateFn;\n    },\n\n    /**\n     * @param {?function()} fn\n     * @this {CustomStyleInterface}\n     */\n    set: function set(fn) {\n      var needsEnqueue = false;\n\n      if (!validateFn) {\n        needsEnqueue = true;\n      }\n\n      validateFn = fn;\n\n      if (needsEnqueue) {\n        this.enqueueDocumentValidation();\n      }\n    }\n  }\n});\n/** @typedef {{\n * customStyles: !Array<!CustomStyleProvider>,\n * addCustomStyle: function(!CustomStyleProvider),\n * getStyleForCustomStyle: function(!CustomStyleProvider): HTMLStyleElement,\n * findStyles: function(),\n * transformCallback: ?function(!HTMLStyleElement),\n * validateCallback: ?function()\n * }}\n */\n\nexport var CustomStyleInterfaceInterface = {};","map":null,"metadata":{},"sourceType":"module"}