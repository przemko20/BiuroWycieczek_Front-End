{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _inherits from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { PropertiesChanged } from './properties-changed.js';\n/**\n * Creates a copy of `props` with each property normalized such that\n * upgraded it is an object with at least a type property { type: Type}.\n *\n * @param {Object} props Properties to normalize\n * @return {Object} Copy of input `props` with normalized properties that\n * are in the form {type: Type}\n * @private\n */\n\nfunction normalizeProperties(props) {\n  var output = {};\n\n  for (var p in props) {\n    var o = props[p];\n    output[p] = typeof o === 'function' ? {\n      type: o\n    } : o;\n  }\n\n  return output;\n}\n/**\n * Mixin that provides a minimal starting point to using the PropertiesChanged\n * mixin by providing a mechanism to declare properties in a static\n * getter (e.g. static get properties() { return { foo: String } }). Changes\n * are reported via the `_propertiesChanged` method.\n *\n * This mixin provides no specific support for rendering. Users are expected\n * to create a ShadowRoot and put content into it and update it in whatever\n * way makes sense. This can be done in reaction to properties changing by\n * implementing `_propertiesChanged`.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertiesChanged\n * @summary Mixin that provides a minimal starting point for using\n * the PropertiesChanged mixin by providing a declarative `properties` object.\n */\n\n\nexport var PropertiesMixin = dedupingMixin(function (superClass) {\n  /**\n   * @constructor\n   * @implements {Polymer_PropertiesChanged}\n   * @private\n   */\n  var base = PropertiesChanged(superClass);\n  /**\n   * Returns the super class constructor for the given class, if it is an\n   * instance of the PropertiesMixin.\n   *\n   * @param {!PropertiesMixinConstructor} constructor PropertiesMixin constructor\n   * @return {?PropertiesMixinConstructor} Super class constructor\n   */\n\n  function superPropertiesClass(constructor) {\n    var superCtor = Object.getPrototypeOf(constructor); // Note, the `PropertiesMixin` class below only refers to the class\n    // generated by this call to the mixin; the instanceof test only works\n    // because the mixin is deduped and guaranteed only to apply once, hence\n    // all constructors in a proto chain will see the same `PropertiesMixin`\n\n    return superCtor.prototype instanceof PropertiesMixin ?\n    /** @type {!PropertiesMixinConstructor} */\n    superCtor : null;\n  }\n  /**\n   * Returns a memoized version of the `properties` object for the\n   * given class. Properties not in object format are converted to at\n   * least {type}.\n   *\n   * @param {PropertiesMixinConstructor} constructor PropertiesMixin constructor\n   * @return {Object} Memoized properties object\n   */\n\n\n  function ownProperties(constructor) {\n    if (!constructor.hasOwnProperty(JSCompiler_renameProperty('__ownProperties', constructor))) {\n      var props = null;\n\n      if (constructor.hasOwnProperty(JSCompiler_renameProperty('properties', constructor))) {\n        var properties = constructor.properties;\n\n        if (properties) {\n          props = normalizeProperties(properties);\n        }\n      }\n\n      constructor.__ownProperties = props;\n    }\n\n    return constructor.__ownProperties;\n  }\n  /**\n   * @polymer\n   * @mixinClass\n   * @extends {base}\n   * @implements {Polymer_PropertiesMixin}\n   * @unrestricted\n   */\n\n\n  var PropertiesMixin =\n  /*#__PURE__*/\n  function (_base) {\n    _inherits(PropertiesMixin, _base);\n\n    function PropertiesMixin() {\n      _classCallCheck(this, PropertiesMixin);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(PropertiesMixin).apply(this, arguments));\n    }\n\n    _createClass(PropertiesMixin, [{\n      key: \"_initializeProperties\",\n\n      /**\n       * Overrides `PropertiesChanged` method and adds a call to\n       * `finalize` which lazily configures the element's property accessors.\n       * @override\n       * @return {void}\n       */\n      value: function _initializeProperties() {\n        this.constructor.finalize();\n\n        _get(_getPrototypeOf(PropertiesMixin.prototype), \"_initializeProperties\", this).call(this);\n      }\n      /**\n       * Called when the element is added to a document.\n       * Calls `_enableProperties` to turn on property system from\n       * `PropertiesChanged`.\n       * @suppress {missingProperties} Super may or may not implement the callback\n       * @return {void}\n       * @override\n       */\n\n    }, {\n      key: \"connectedCallback\",\n      value: function connectedCallback() {\n        if (_get(_getPrototypeOf(PropertiesMixin.prototype), \"connectedCallback\", this)) {\n          _get(_getPrototypeOf(PropertiesMixin.prototype), \"connectedCallback\", this).call(this);\n        }\n\n        this._enableProperties();\n      }\n      /**\n       * Called when the element is removed from a document\n       * @suppress {missingProperties} Super may or may not implement the callback\n       * @return {void}\n       * @override\n       */\n\n    }, {\n      key: \"disconnectedCallback\",\n      value: function disconnectedCallback() {\n        if (_get(_getPrototypeOf(PropertiesMixin.prototype), \"disconnectedCallback\", this)) {\n          _get(_getPrototypeOf(PropertiesMixin.prototype), \"disconnectedCallback\", this).call(this);\n        }\n      }\n    }], [{\n      key: \"finalize\",\n\n      /**\n       * Finalizes an element definition, including ensuring any super classes\n       * are also finalized. This includes ensuring property\n       * accessors exist on the element prototype. This method calls\n       * `_finalizeClass` to finalize each constructor in the prototype chain.\n       * @return {void}\n       */\n      value: function finalize() {\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('__finalized', this))) {\n          var superCtor = superPropertiesClass(\n          /** @type {!PropertiesMixinConstructor} */\n          this);\n\n          if (superCtor) {\n            superCtor.finalize();\n          }\n\n          this.__finalized = true;\n\n          this._finalizeClass();\n        }\n      }\n      /**\n       * Finalize an element class. This includes ensuring property\n       * accessors exist on the element prototype. This method is called by\n       * `finalize` and finalizes the class constructor.\n       *\n       * @protected\n       */\n\n    }, {\n      key: \"_finalizeClass\",\n      value: function _finalizeClass() {\n        var props = ownProperties(\n        /** @type {!PropertiesMixinConstructor} */\n        this);\n\n        if (props) {\n          this.createProperties(props);\n        }\n      }\n      /**\n       * Returns a memoized version of all properties, including those inherited\n       * from super classes. Properties not in object format are converted to\n       * at least {type}.\n       *\n       * @return {Object} Object containing properties for this class\n       * @protected\n       */\n\n    }, {\n      key: \"typeForProperty\",\n\n      /**\n       * Overrides `PropertiesChanged` method to return type specified in the\n       * static `properties` object for the given property.\n       * @param {string} name Name of property\n       * @return {*} Type to which to deserialize attribute\n       *\n       * @protected\n       */\n      value: function typeForProperty(name) {\n        var info = this._properties[name];\n        return info && info.type;\n      }\n    }, {\n      key: \"observedAttributes\",\n\n      /**\n       * Implements standard custom elements getter to observes the attributes\n       * listed in `properties`.\n       * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n       */\n      get: function get() {\n        var _this = this;\n\n        var props = this._properties;\n        return props ? Object.keys(props).map(function (p) {\n          return _this.attributeNameForProperty(p);\n        }) : [];\n      }\n    }, {\n      key: \"_properties\",\n      get: function get() {\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('__properties', this))) {\n          var superCtor = superPropertiesClass(\n          /** @type {!PropertiesMixinConstructor} */\n          this);\n          this.__properties = Object.assign({}, superCtor && superCtor._properties, ownProperties(\n          /** @type {PropertiesMixinConstructor} */\n          this));\n        }\n\n        return this.__properties;\n      }\n    }]);\n\n    return PropertiesMixin;\n  }(base);\n\n  return PropertiesMixin;\n});","map":null,"metadata":{},"sourceType":"module"}