{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _inherits from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { DomModule } from '@polymer/polymer/lib/elements/dom-module.js';\nimport { ThemePropertyMixin } from './vaadin-theme-property-mixin.js';\n/**\n * @polymerMixin\n */\n\nexport var ThemableMixin = function ThemableMixin(superClass) {\n  return (\n    /*#__PURE__*/\n    function (_ThemePropertyMixin) {\n      _inherits(VaadinThemableMixin, _ThemePropertyMixin);\n\n      function VaadinThemableMixin() {\n        _classCallCheck(this, VaadinThemableMixin);\n\n        return _possibleConstructorReturn(this, _getPrototypeOf(VaadinThemableMixin).apply(this, arguments));\n      }\n\n      _createClass(VaadinThemableMixin, null, [{\n        key: \"finalize\",\n\n        /** @protected */\n        value: function finalize() {\n          var _this = this;\n\n          _get(_getPrototypeOf(VaadinThemableMixin), \"finalize\", this).call(this);\n\n          var template = this.prototype._template;\n          var hasOwnTemplate = this.template && this.template.parentElement && this.template.parentElement.id === this.is;\n\n          var inheritedTemplate = Object.getPrototypeOf(this.prototype)._template;\n\n          if (inheritedTemplate && !hasOwnTemplate) {\n            // The element doesn't define its own template -> include the theme modules from the inherited template\n            Array.from(inheritedTemplate.content.querySelectorAll('style[include]')).forEach(function (s) {\n              _this._includeStyle(s.getAttribute('include'), template);\n            });\n          }\n\n          this._includeMatchingThemes(template);\n        }\n        /** @protected */\n\n      }, {\n        key: \"_includeMatchingThemes\",\n        value: function _includeMatchingThemes(template) {\n          var _this2 = this;\n\n          var domModule = DomModule;\n          var modules = domModule.prototype.modules;\n          var hasThemes = false;\n          var defaultModuleName = this.is + '-default-theme';\n          Object.keys(modules).forEach(function (moduleName) {\n            if (moduleName !== defaultModuleName) {\n              var themeFor = modules[moduleName].getAttribute('theme-for');\n\n              if (themeFor) {\n                themeFor.split(' ').forEach(function (themeForToken) {\n                  if (new RegExp('^' + themeForToken.split('*').join('.*') + '$').test(_this2.is)) {\n                    hasThemes = true;\n\n                    _this2._includeStyle(moduleName, template);\n                  }\n                });\n              }\n            }\n          });\n\n          if (!hasThemes && modules[defaultModuleName]) {\n            // No theme modules found, include the default module if it exists\n            this._includeStyle(defaultModuleName, template);\n          }\n        }\n        /** @private */\n\n      }, {\n        key: \"_includeStyle\",\n        value: function _includeStyle(moduleName, template) {\n          if (template && !template.content.querySelector(\"style[include=\".concat(moduleName, \"]\"))) {\n            var styleEl = document.createElement('style');\n            styleEl.setAttribute('include', moduleName);\n            template.content.appendChild(styleEl);\n          }\n        }\n      }]);\n\n      return VaadinThemableMixin;\n    }(ThemePropertyMixin(superClass))\n  );\n};","map":null,"metadata":{},"sourceType":"module"}