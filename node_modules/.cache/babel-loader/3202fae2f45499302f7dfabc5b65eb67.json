{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n/**\n@license\nCopyright (c) 2017 Vaadin Ltd.\nThis program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n*/\nexport var DatePickerHelper =\n/*#__PURE__*/\nfunction () {\n  function VaadinDatePickerHelper() {\n    _classCallCheck(this, VaadinDatePickerHelper);\n  }\n\n  _createClass(VaadinDatePickerHelper, null, [{\n    key: \"_getISOWeekNumber\",\n\n    /**\n     * Get ISO 8601 week number for the given date.\n     *\n     * @param {Date} Date object\n     * @return {Number} Week number\n     */\n    value: function _getISOWeekNumber(date) {\n      // Ported from Vaadin Framework method com.vaadin.client.DateTimeService.getISOWeekNumber(date)\n      var dayOfWeek = date.getDay(); // 0 == sunday\n      // ISO 8601 use weeks that start on monday so we use\n      // mon=1,tue=2,...sun=7;\n\n      if (dayOfWeek === 0) {\n        dayOfWeek = 7;\n      } // Find nearest thursday (defines the week in ISO 8601). The week number\n      // for the nearest thursday is the same as for the target date.\n\n\n      var nearestThursdayDiff = 4 - dayOfWeek; // 4 is thursday\n\n      var nearestThursday = new Date(date.getTime() + nearestThursdayDiff * 24 * 3600 * 1000);\n      var firstOfJanuary = new Date(0, 0);\n      firstOfJanuary.setFullYear(nearestThursday.getFullYear());\n      var timeDiff = nearestThursday.getTime() - firstOfJanuary.getTime(); // Rounding the result, as the division doesn't result in an integer\n      // when the given date is inside daylight saving time period.\n\n      var daysSinceFirstOfJanuary = Math.round(timeDiff / (24 * 3600 * 1000));\n      return Math.floor(daysSinceFirstOfJanuary / 7 + 1);\n    }\n    /**\n     * Check if two dates are equal.\n     *\n     * @param {Date} date1\n     * @param {Date} date2\n     * @return {Boolean} True if the given date objects refer to the same date\n     */\n\n  }, {\n    key: \"_dateEquals\",\n    value: function _dateEquals(date1, date2) {\n      return date1 instanceof Date && date2 instanceof Date && date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth() && date1.getDate() === date2.getDate();\n    }\n    /**\n     * Check if the given date is in the range of allowed dates.\n     *\n     * @param {Date} date The date to check\n     * @param {Date} min Range start\n     * @param {Date} max Range end\n     * @return {Boolean} True if the date is in the range\n     */\n\n  }, {\n    key: \"_dateAllowed\",\n    value: function _dateAllowed(date, min, max) {\n      return (!min || date >= min) && (!max || date <= max);\n    }\n    /**\n     * Get closest date from array of dates.\n     *\n     * @param {Date} date The date to compare dates with\n     * @param {Array} dates Array of date objects\n     * @return {Date} Closest date\n     */\n\n  }, {\n    key: \"_getClosestDate\",\n    value: function _getClosestDate(date, dates) {\n      return dates.filter(function (date) {\n        return date !== undefined;\n      }).reduce(function (closestDate, candidate) {\n        if (!candidate) {\n          return closestDate;\n        }\n\n        if (!closestDate) {\n          return candidate;\n        }\n\n        var candidateDiff = Math.abs(date.getTime() - candidate.getTime());\n        var closestDateDiff = Math.abs(closestDate.getTime() - date.getTime());\n        return candidateDiff < closestDateDiff ? candidate : closestDate;\n      });\n    }\n    /**\n     * Extracts the basic component parts of a date (day, month and year)\n     * to the expected format.\n     */\n\n  }, {\n    key: \"_extractDateParts\",\n    value: function _extractDateParts(date) {\n      return {\n        day: date.getDate(),\n        month: date.getMonth(),\n        year: date.getFullYear()\n      };\n    }\n  }]);\n\n  return VaadinDatePickerHelper;\n}();","map":null,"metadata":{},"sourceType":"module"}