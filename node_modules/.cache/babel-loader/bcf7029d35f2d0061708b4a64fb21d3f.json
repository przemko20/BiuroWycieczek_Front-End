{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _inherits from \"C:\\\\Users\\\\CTO-EC\\\\Desktop\\\\Programowanie\\\\Web\\xF3wka\\\\React\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\n/**\n@license\nCopyright (c) 2017 Vaadin Ltd.\nThis program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n*/\nimport '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { ControlStateMixin } from '@vaadin/vaadin-control-state-mixin/vaadin-control-state-mixin.js';\nvar $_documentContainer = document.createElement('template');\n$_documentContainer.innerHTML = \"<dom-module id=\\\"vaadin-text-field-shared-styles\\\">\\n  <template>\\n    <style>\\n      :host {\\n        display: inline-flex;\\n        outline: none;\\n      }\\n\\n      :host::before {\\n        content: \\\"\\\\2003\\\";\\n        width: 0;\\n        display: inline-block;\\n        /* Size and position this element on the same vertical position as the input-field element\\n           to make vertical align for the host element work as expected */\\n      }\\n\\n      :host([hidden]) {\\n        display: none !important;\\n      }\\n\\n      .vaadin-text-field-container,\\n      .vaadin-text-area-container {\\n        display: flex;\\n        flex-direction: column;\\n        min-width: 100%;\\n        max-width: 100%;\\n        width: var(--vaadin-text-field-default-width, 12em);\\n      }\\n\\n      [part=\\\"label\\\"]:empty {\\n        display: none;\\n      }\\n\\n      [part=\\\"input-field\\\"] {\\n        display: flex;\\n        align-items: center;\\n        flex: auto;\\n      }\\n\\n      .vaadin-text-field-container [part=\\\"input-field\\\"] {\\n        flex-grow: 0;\\n      }\\n\\n      /* Reset the native input styles */\\n      [part=\\\"value\\\"] {\\n        -webkit-appearance: none;\\n        -moz-appearance: none;\\n        outline: none;\\n        margin: 0;\\n        padding: 0;\\n        border: 0;\\n        border-radius: 0;\\n        min-width: 0;\\n        font: inherit;\\n        font-size: 1em;\\n        line-height: normal;\\n        color: inherit;\\n        background-color: transparent;\\n        /* Disable default invalid style in Firefox */\\n        box-shadow: none;\\n      }\\n\\n      [part=\\\"input-field\\\"] ::slotted(*) {\\n        flex: none;\\n      }\\n\\n      /* Slotted by vaadin-dropdown-menu-text-field */\\n      [part=\\\"value\\\"],\\n      [part=\\\"input-field\\\"] ::slotted([part=\\\"value\\\"]) {\\n        flex: auto;\\n        white-space: nowrap;\\n        overflow: hidden;\\n        width: 100%;\\n        height: 100%;\\n      }\\n\\n      [part=\\\"value\\\"]::-ms-clear {\\n        display: none;\\n      }\\n    </style>\\n  </template>\\n</dom-module>\";\ndocument.head.appendChild($_documentContainer.content);\n/**\n * @polymerMixin\n * @mixes Vaadin.ControlStateMixin\n */\n\nexport var TextFieldMixin = function TextFieldMixin(subclass) {\n  return (\n    /*#__PURE__*/\n    function (_ControlStateMixin) {\n      _inherits(VaadinTextFieldMixin, _ControlStateMixin);\n\n      function VaadinTextFieldMixin() {\n        _classCallCheck(this, VaadinTextFieldMixin);\n\n        return _possibleConstructorReturn(this, _getPrototypeOf(VaadinTextFieldMixin).apply(this, arguments));\n      }\n\n      _createClass(VaadinTextFieldMixin, [{\n        key: \"_onInput\",\n        value: function _onInput(e) {\n          if (this.preventInvalidInput) {\n            var input = this.focusElement;\n\n            if (input.value.length > 0 && !this.checkValidity()) {\n              input.value = this.value || '';\n            }\n          }\n        }\n      }, {\n        key: \"_onChange\",\n        value: function _onChange(e) {\n          // In the Shadow DOM, the `change` event is not leaked into the\n          // ancestor tree, so we must do this manually.\n          var changeEvent = new CustomEvent('change', {\n            detail: {\n              sourceEvent: e\n            },\n            bubbles: e.bubbles,\n            cancelable: e.cancelable\n          });\n          this.dispatchEvent(changeEvent);\n        }\n      }, {\n        key: \"_valueChanged\",\n        value: function _valueChanged(newVal, oldVal) {\n          // setting initial value to empty string, skip validation\n          if (newVal === '' && oldVal === undefined) {\n            return;\n          }\n\n          if (this.invalid) {\n            this.validate();\n          }\n\n          if (newVal !== '' && newVal != null) {\n            this.setAttribute('has-value', '');\n          } else {\n            this.removeAttribute('has-value');\n          }\n        }\n      }, {\n        key: \"_labelChanged\",\n        value: function _labelChanged(label) {\n          if (label !== '' && label != null) {\n            this.setAttribute('has-label', '');\n          } else {\n            this.removeAttribute('has-label');\n          }\n        }\n        /**\n         * Returns true if the current input value satisfies all constraints (if any)\n         * @returns {boolean}\n         */\n\n      }, {\n        key: \"checkValidity\",\n        value: function checkValidity() {\n          if (this.required || this.pattern || this.maxlength || this.minlength) {\n            return this.focusElement.checkValidity();\n          } else {\n            return !this.invalid;\n          }\n        }\n      }, {\n        key: \"ready\",\n        value: function ready() {\n          _get(_getPrototypeOf(VaadinTextFieldMixin.prototype), \"ready\", this).call(this);\n\n          if (!(window.ShadyCSS && window.ShadyCSS.nativeCss)) {\n            this.updateStyles();\n          }\n\n          var uniqueId = TextFieldMixin._uniqueId = 1 + TextFieldMixin._uniqueId || 0;\n          this._errorId = \"\".concat(this.constructor.is, \"-error-\").concat(uniqueId);\n          this._labelId = \"\".concat(this.constructor.is, \"-label-\").concat(uniqueId);\n          /* istanbul ignore if */\n\n          if (navigator.userAgent.match(/Trident/)) {\n            this._addIEListeners();\n          }\n        }\n        /**\n         * Returns true if `value` is valid.\n         * `<iron-form>` uses this to check the validity or all its elements.\n         *\n         * @return {boolean} True if the value is valid.\n         */\n\n      }, {\n        key: \"validate\",\n        value: function validate() {\n          return !(this.invalid = !this.checkValidity());\n        }\n      }, {\n        key: \"_addIEListeners\",\n        value: function _addIEListeners() {\n          var _this = this;\n\n          // IE11 dispatches `input` event in following cases:\n          // - focus or blur, when placeholder attribute is set\n          // - placeholder attribute value changed\n          // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/101220/\n          var prevent = function prevent(e) {\n            e.stopImmediatePropagation();\n\n            _this.focusElement.removeEventListener('input', prevent);\n          };\n\n          var shouldPreventInput = function shouldPreventInput() {\n            return _this.placeholder && _this.focusElement.addEventListener('input', prevent);\n          };\n\n          this.focusElement.addEventListener('focusin', shouldPreventInput);\n          this.focusElement.addEventListener('focusout', shouldPreventInput);\n\n          this._createPropertyObserver('placeholder', shouldPreventInput);\n        }\n      }, {\n        key: \"_getActiveErrorId\",\n        value: function _getActiveErrorId(invalid, errorMessage, errorId) {\n          return errorMessage && invalid ? errorId : undefined;\n        }\n      }, {\n        key: \"_getActiveLabelId\",\n        value: function _getActiveLabelId(label, labelId) {\n          return label ? labelId : undefined;\n        }\n      }, {\n        key: \"_getErrorMessageAriaHidden\",\n        value: function _getErrorMessageAriaHidden(invalid, errorMessage, errorId) {\n          return (!this._getActiveErrorId(invalid, errorMessage, errorId)).toString();\n        }\n        /**\n         * @protected\n         */\n\n      }, {\n        key: \"attributeChangedCallback\",\n        value: function attributeChangedCallback(prop, oldVal, newVal) {\n          _get(_getPrototypeOf(VaadinTextFieldMixin.prototype), \"attributeChangedCallback\", this).call(this, prop, oldVal, newVal); // Needed until Edge has CSS Custom Properties (present in Edge Preview)\n\n          /* istanbul ignore if */\n\n\n          if (!(window.ShadyCSS && window.ShadyCSS.nativeCss) && /^(focused|focus-ring|invalid|disabled|placeholder|has-value)$/.test(prop)) {\n            this.updateStyles();\n          } // Safari has an issue with repainting shadow root element styles when a host attribute changes.\n          // Need this workaround (toggle any inline css property on and off) until the issue gets fixed.\n\n\n          var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n          /* istanbul ignore if */\n\n          if (isSafari && this.root) {\n            var WEBKIT_PROPERTY = '-webkit-backface-visibility';\n            this.root.querySelectorAll('*').forEach(function (el) {\n              el.style[WEBKIT_PROPERTY] = 'visible';\n              el.style[WEBKIT_PROPERTY] = '';\n            });\n          }\n        }\n        /**\n         * Fired when the user commits a value change.\n         *\n         * @event change\n         */\n\n      }, {\n        key: \"focusElement\",\n        get: function get() {\n          return this.root && this.root.querySelector('[part=value]');\n        }\n      }], [{\n        key: \"properties\",\n        get: function get() {\n          return {\n            /**\n             * Whether the value of the control can be automatically completed by the browser.\n             * List of available options at:\n             * https://developer.mozilla.org/en/docs/Web/HTML/Element/input#attr-autocomplete\n             */\n            autocomplete: {\n              type: String\n            },\n\n            /**\n             * This is a property supported by Safari that is used to control whether\n             * autocorrection should be enabled when the user is entering/editing the text.\n             * Possible values are:\n             * on: Enable autocorrection.\n             * off: Disable autocorrection.\n             */\n            autocorrect: {\n              type: String\n            },\n\n            /**\n             * This is a property supported by Safari and Chrome that is used to control whether\n             * autocapitalization should be enabled when the user is entering/editing the text.\n             * Possible values are:\n             * characters: Characters capitalization.\n             * words: Words capitalization.\n             * sentences: Sentences capitalization.\n             * none: No capitalization.\n             */\n            autocapitalize: {\n              type: String\n            },\n\n            /**\n             * Error to show when the input value is invalid.\n             */\n            errorMessage: {\n              type: String,\n              value: ''\n            },\n\n            /**\n             * String used for the label element.\n             */\n            label: {\n              type: String,\n              value: '',\n              observer: '_labelChanged'\n            },\n\n            /**\n             * Maximum number of characters (in Unicode code points) that the user can enter.\n             */\n            maxlength: {\n              type: Number\n            },\n\n            /**\n             * Minimum number of characters (in Unicode code points) that the user can enter.\n             */\n            minlength: {\n              type: Number\n            },\n\n            /**\n             * The name of the control, which is submitted with the form data.\n             */\n            name: {\n              type: String\n            },\n\n            /**\n             * A hint to the user of what can be entered in the control.\n             */\n            placeholder: {\n              type: String\n            },\n\n            /**\n             * This attribute indicates that the user cannot modify the value of the control.\n             */\n            readonly: {\n              type: Boolean,\n              reflectToAttribute: true\n            },\n\n            /**\n             * Specifies that the user must fill in a value.\n             */\n            required: {\n              type: Boolean,\n              reflectToAttribute: true\n            },\n\n            /**\n             * The initial value of the control.\n             * It can be used for two-way data binding.\n             */\n            value: {\n              type: String,\n              value: '',\n              observer: '_valueChanged',\n              notify: true\n            },\n\n            /**\n             * This property is set to true when the control value is invalid.\n             */\n            invalid: {\n              type: Boolean,\n              reflectToAttribute: true,\n              notify: true,\n              value: false\n            },\n\n            /**\n             * When set to true, user is prevented from typing a value that\n             * conflicts with the given `pattern`.\n             */\n            preventInvalidInput: {\n              type: Boolean\n            },\n            _labelId: {\n              type: String\n            },\n            _errorId: {\n              type: String\n            }\n          };\n        }\n      }]);\n\n      return VaadinTextFieldMixin;\n    }(ControlStateMixin(subclass))\n  );\n};","map":null,"metadata":{},"sourceType":"module"}