{"ast":null,"code":"/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n'use strict';\n\nimport { nativeShadow, nativeCssVariables, cssBuild } from './style-settings.js';\nimport { parse, stringify, types, StyleNode } from './css-parse.js'; // eslint-disable-line no-unused-vars\n\nimport { MEDIA_MATCH } from './common-regex.js';\nimport { processUnscopedStyle, isUnscopedStyle } from './unscoped-style-handler.js';\n/**\n * @param {string|StyleNode} rules\n * @param {function(StyleNode)=} callback\n * @return {string}\n */\n\nexport function toCssText(rules, callback) {\n  if (!rules) {\n    return '';\n  }\n\n  if (typeof rules === 'string') {\n    rules = parse(rules);\n  }\n\n  if (callback) {\n    forEachRule(rules, callback);\n  }\n\n  return stringify(rules, nativeCssVariables);\n}\n/**\n * @param {HTMLStyleElement} style\n * @return {StyleNode}\n */\n\nexport function rulesForStyle(style) {\n  if (!style['__cssRules'] && style.textContent) {\n    style['__cssRules'] = parse(style.textContent);\n  }\n\n  return style['__cssRules'] || null;\n} // Tests if a rule is a keyframes selector, which looks almost exactly\n// like a normal selector but is not (it has nothing to do with scoping\n// for example).\n\n/**\n * @param {StyleNode} rule\n * @return {boolean}\n */\n\nexport function isKeyframesSelector(rule) {\n  return Boolean(rule['parent']) && rule['parent']['type'] === types.KEYFRAMES_RULE;\n}\n/**\n * @param {StyleNode} node\n * @param {Function=} styleRuleCallback\n * @param {Function=} keyframesRuleCallback\n * @param {boolean=} onlyActiveRules\n */\n\nexport function forEachRule(node, styleRuleCallback, keyframesRuleCallback, onlyActiveRules) {\n  if (!node) {\n    return;\n  }\n\n  var skipRules = false;\n  var type = node['type'];\n\n  if (onlyActiveRules) {\n    if (type === types.MEDIA_RULE) {\n      var matchMedia = node['selector'].match(MEDIA_MATCH);\n\n      if (matchMedia) {\n        // if rule is a non matching @media rule, skip subrules\n        if (!window.matchMedia(matchMedia[1]).matches) {\n          skipRules = true;\n        }\n      }\n    }\n  }\n\n  if (type === types.STYLE_RULE) {\n    styleRuleCallback(node);\n  } else if (keyframesRuleCallback && type === types.KEYFRAMES_RULE) {\n    keyframesRuleCallback(node);\n  } else if (type === types.MIXIN_RULE) {\n    skipRules = true;\n  }\n\n  var r$ = node['rules'];\n\n  if (r$ && !skipRules) {\n    for (var i = 0, l = r$.length, r; i < l && (r = r$[i]); i++) {\n      forEachRule(r, styleRuleCallback, keyframesRuleCallback, onlyActiveRules);\n    }\n  }\n} // add a string of cssText to the document.\n\n/**\n * @param {string} cssText\n * @param {string} moniker\n * @param {Node} target\n * @param {Node} contextNode\n * @return {HTMLStyleElement}\n */\n\nexport function applyCss(cssText, moniker, target, contextNode) {\n  var style = createScopeStyle(cssText, moniker);\n  applyStyle(style, target, contextNode);\n  return style;\n}\n/**\n * @param {string} cssText\n * @param {string} moniker\n * @return {HTMLStyleElement}\n */\n\nexport function createScopeStyle(cssText, moniker) {\n  var style =\n  /** @type {HTMLStyleElement} */\n  document.createElement('style');\n\n  if (moniker) {\n    style.setAttribute('scope', moniker);\n  }\n\n  style.textContent = cssText;\n  return style;\n}\n/**\n * Track the position of the last added style for placing placeholders\n * @type {Node}\n */\n\nvar lastHeadApplyNode = null; // insert a comment node as a styling position placeholder.\n\n/**\n * @param {string} moniker\n * @return {!Comment}\n */\n\nexport function applyStylePlaceHolder(moniker) {\n  var placeHolder = document.createComment(' Shady DOM styles for ' + moniker + ' ');\n  var after = lastHeadApplyNode ? lastHeadApplyNode['nextSibling'] : null;\n  var scope = document.head;\n  scope.insertBefore(placeHolder, after || scope.firstChild);\n  lastHeadApplyNode = placeHolder;\n  return placeHolder;\n}\n/**\n * @param {HTMLStyleElement} style\n * @param {?Node} target\n * @param {?Node} contextNode\n */\n\nexport function applyStyle(style, target, contextNode) {\n  target = target || document.head;\n  var after = contextNode && contextNode.nextSibling || target.firstChild;\n  target.insertBefore(style, after);\n\n  if (!lastHeadApplyNode) {\n    lastHeadApplyNode = style;\n  } else {\n    // only update lastHeadApplyNode if the new style is inserted after the old lastHeadApplyNode\n    var position = style.compareDocumentPosition(lastHeadApplyNode);\n\n    if (position === Node.DOCUMENT_POSITION_PRECEDING) {\n      lastHeadApplyNode = style;\n    }\n  }\n}\n/**\n * @param {string} buildType\n * @return {boolean}\n */\n\nexport function isTargetedBuild(buildType) {\n  return nativeShadow ? buildType === 'shadow' : buildType === 'shady';\n}\n/**\n * Walk from text[start] matching parens and\n * returns position of the outer end paren\n * @param {string} text\n * @param {number} start\n * @return {number}\n */\n\nexport function findMatchingParen(text, start) {\n  var level = 0;\n\n  for (var i = start, l = text.length; i < l; i++) {\n    if (text[i] === '(') {\n      level++;\n    } else if (text[i] === ')') {\n      if (--level === 0) {\n        return i;\n      }\n    }\n  }\n\n  return -1;\n}\n/**\n * @param {string} str\n * @param {function(string, string, string, string)} callback\n */\n\nexport function processVariableAndFallback(str, callback) {\n  // find 'var('\n  var start = str.indexOf('var(');\n\n  if (start === -1) {\n    // no var?, everything is prefix\n    return callback(str, '', '', '');\n  } //${prefix}var(${inner})${suffix}\n\n\n  var end = findMatchingParen(str, start + 3);\n  var inner = str.substring(start + 4, end);\n  var prefix = str.substring(0, start); // suffix may have other variables\n\n  var suffix = processVariableAndFallback(str.substring(end + 1), callback);\n  var comma = inner.indexOf(','); // value and fallback args should be trimmed to match in property lookup\n\n  if (comma === -1) {\n    // variable, no fallback\n    return callback(prefix, inner.trim(), '', suffix);\n  } // var(${value},${fallback})\n\n\n  var value = inner.substring(0, comma).trim();\n  var fallback = inner.substring(comma + 1).trim();\n  return callback(prefix, value, fallback, suffix);\n}\n/**\n * @param {Element} element\n * @param {string} value\n */\n\nexport function setElementClassRaw(element, value) {\n  // use native setAttribute provided by ShadyDOM when setAttribute is patched\n  if (nativeShadow) {\n    element.setAttribute('class', value);\n  } else {\n    window['ShadyDOM']['nativeMethods']['setAttribute'].call(element, 'class', value);\n  }\n}\n/**\n * @type {function(*):*}\n */\n\nexport var wrap = window['ShadyDOM'] && window['ShadyDOM']['wrap'] || function (node) {\n  return node;\n};\n/**\n * @param {Element | {is: string, extends: string}} element\n * @return {{is: string, typeExtension: string}}\n */\n\nexport function getIsExtends(element) {\n  var localName = element['localName'];\n  var is = '',\n      typeExtension = '';\n  /*\n  NOTE: technically, this can be wrong for certain svg elements\n  with `-` in the name like `<font-face>`\n  */\n\n  if (localName) {\n    if (localName.indexOf('-') > -1) {\n      is = localName;\n    } else {\n      typeExtension = localName;\n      is = element.getAttribute && element.getAttribute('is') || '';\n    }\n  } else {\n    is =\n    /** @type {?} */\n    element.is;\n    typeExtension =\n    /** @type {?} */\n    element.extends;\n  }\n\n  return {\n    is: is,\n    typeExtension: typeExtension\n  };\n}\n/**\n * @param {Element|DocumentFragment} element\n * @return {string}\n */\n\nexport function gatherStyleText(element) {\n  /** @type {!Array<string>} */\n  var styleTextParts = [];\n  var styles =\n  /** @type {!NodeList<!HTMLStyleElement>} */\n  element.querySelectorAll('style');\n\n  for (var i = 0; i < styles.length; i++) {\n    var style = styles[i];\n\n    if (isUnscopedStyle(style)) {\n      if (!nativeShadow) {\n        processUnscopedStyle(style);\n        style.parentNode.removeChild(style);\n      }\n    } else {\n      styleTextParts.push(style.textContent);\n      style.parentNode.removeChild(style);\n    }\n  }\n\n  return styleTextParts.join('').trim();\n}\n/**\n * Split a selector separated by commas into an array in a smart way\n * @param {string} selector\n * @return {!Array<string>}\n */\n\nexport function splitSelectorList(selector) {\n  var parts = [];\n  var part = '';\n\n  for (var i = 0; i >= 0 && i < selector.length; i++) {\n    // A selector with parentheses will be one complete part\n    if (selector[i] === '(') {\n      // find the matching paren\n      var end = findMatchingParen(selector, i); // push the paren block into the part\n\n      part += selector.slice(i, end + 1); // move the index to after the paren block\n\n      i = end;\n    } else if (selector[i] === ',') {\n      parts.push(part);\n      part = '';\n    } else {\n      part += selector[i];\n    }\n  } // catch any pieces after the last comma\n\n\n  if (part) {\n    parts.push(part);\n  }\n\n  return parts;\n}\nvar CSS_BUILD_ATTR = 'css-build';\n/**\n * Return the polymer-css-build \"build type\" applied to this element\n *\n * @param {!HTMLElement} element\n * @return {string} Can be \"\", \"shady\", or \"shadow\"\n */\n\nexport function getCssBuild(element) {\n  if (cssBuild !== undefined) {\n    return (\n      /** @type {string} */\n      cssBuild\n    );\n  }\n\n  if (element.__cssBuild === undefined) {\n    // try attribute first, as it is the common case\n    var attrValue = element.getAttribute(CSS_BUILD_ATTR);\n\n    if (attrValue) {\n      element.__cssBuild = attrValue;\n    } else {\n      var buildComment = getBuildComment(element);\n\n      if (buildComment !== '') {\n        // remove build comment so it is not needlessly copied into every element instance\n        removeBuildComment(element);\n      }\n\n      element.__cssBuild = buildComment;\n    }\n  }\n\n  return element.__cssBuild || '';\n}\n/**\n * Check if the given element, either a <template> or <style>, has been processed\n * by polymer-css-build.\n *\n * If so, then we can make a number of optimizations:\n * - polymer-css-build will decompose mixins into individual CSS Custom Properties,\n * so the ApplyShim can be skipped entirely.\n * - Under native ShadowDOM, the style text can just be copied into each instance\n * without modification\n * - If the build is \"shady\" and ShadyDOM is in use, the styling does not need\n * scoping beyond the shimming of CSS Custom Properties\n *\n * @param {!HTMLElement} element\n * @return {boolean}\n */\n\nexport function elementHasBuiltCss(element) {\n  return getCssBuild(element) !== '';\n}\n/**\n * For templates made with tagged template literals, polymer-css-build will\n * insert a comment of the form `<!--css-build:shadow-->`\n *\n * @param {!HTMLElement} element\n * @return {string}\n */\n\nexport function getBuildComment(element) {\n  var buildComment = element.localName === 'template' ?\n  /** @type {!HTMLTemplateElement} */\n  element.content.firstChild : element.firstChild;\n\n  if (buildComment instanceof Comment) {\n    var commentParts = buildComment.textContent.trim().split(':');\n\n    if (commentParts[0] === CSS_BUILD_ATTR) {\n      return commentParts[1];\n    }\n  }\n\n  return '';\n}\n/**\n * Check if the css build status is optimal, and do no unneeded work.\n *\n * @param {string=} cssBuild CSS build status\n * @return {boolean} css build is optimal or not\n */\n\nexport function isOptimalCssBuild() {\n  var cssBuild = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n  // CSS custom property shim always requires work\n  if (cssBuild === '' || !nativeCssVariables) {\n    return false;\n  }\n\n  return nativeShadow ? cssBuild === 'shadow' : cssBuild === 'shady';\n}\n/**\n * @param {!HTMLElement} element\n */\n\nfunction removeBuildComment(element) {\n  var buildComment = element.localName === 'template' ?\n  /** @type {!HTMLTemplateElement} */\n  element.content.firstChild : element.firstChild;\n  buildComment.parentNode.removeChild(buildComment);\n}","map":null,"metadata":{},"sourceType":"module"}